buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${rootProject.ext.hiCoreVersion.buildGradle}"
        classpath "com.neenbedankt.gradle.plugins:android-apt:${rootProject.ext.hiCoreVersion.androidApt}"
        classpath "me.tatarka:gradle-retrolambda:${rootProject.ext.hiCoreVersion.retrolambda}"
        classpath "io.realm:realm-gradle-plugin:${rootProject.ext.hiCoreVersion.realm}"
        classpath "org.ajoberstar:grgit:${rootProject.ext.hiCoreVersion.grgit}"
    }
}
import org.ajoberstar.grgit.Grgit

ext {
    git = Grgit.open(currentDir: projectDir)
    gitVersionName = git.describe()
    gitVersionCode = git.tag.list().size()
    gitVersionCodeTime = git.head().time
}

apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'android-apt'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'realm-android'
repositories { maven { url 'https://jitpack.io' } }

android {
    compileSdkVersion rootProject.ext.hiCoreVersion.compileSdkVersion
    buildToolsVersion rootProject.ext.hiCoreVersion.buildToolsVersion
    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def fileName = "hicore-" + variant.name + ".aar"
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace(output.outputFile.name, fileName))
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.hiCoreVersion.minSdkVersion
        targetSdkVersion rootProject.ext.hiCoreVersion.targetSdkVersion
        versionCode gitVersionCode
        versionName gitVersionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    //Rest client
    compile "com.google.code.gson:gson:${rootProject.ext.hiCoreVersion.gson}"
    compile "com.squareup.okhttp3:okhttp:${rootProject.ext.hiCoreVersion.okhttp}"
    compile "com.squareup.retrofit2:retrofit:${rootProject.ext.hiCoreVersion.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${rootProject.ext.hiCoreVersion.retrofitConverterGson}"
    compile "com.squareup.retrofit2:adapter-rxjava:${rootProject.ext.hiCoreVersion.retrofitAdapterRxjava}"

    //Async
    compile "io.reactivex:rxandroid:${rootProject.ext.hiCoreVersion.rxAndroid}"
    compile "io.reactivex:rxjava:${rootProject.ext.hiCoreVersion.rxJava}"

    //Dagger
    apt "com.google.dagger:dagger-compiler:${rootProject.ext.hiCoreVersion.daggerCompiler}"
    compile "com.google.dagger:dagger:${rootProject.ext.hiCoreVersion.dagger}"
    provided "javax.annotation:jsr250-api:${rootProject.ext.hiCoreVersion.jsr250Api}"

    //Date times
    compile "net.danlew:android.joda:${rootProject.ext.hiCoreVersion.joda}"

    //Logs
    compile "com.github.LogentriesCommunity:le_android:${rootProject.ext.hiCoreVersion.logentries}"

    //Pref storage
    compile "com.github.orhanobut:hawk:${rootProject.ext.hiCoreVersion.hawk}"

    //Cicerone
    compile "ru.terrakok.cicerone:cicerone:${rootProject.ext.hiCoreVersion.cicerone}"

    //Messages
    compile "org.greenrobot:eventbus:${rootProject.ext.hiCoreVersion.eventbus}"

}
