buildscript {
    ext {
        // Config version for core
        hiCoreVersion = [
                buildGradle          : "2.3.3",
                androidApt           : "1.8",
                retrolambda          : "3.6.0",
                grgit                : "1.5.0",
                compileSdkVersion    : 26,
                buildToolsVersion    : "26.0.1",
                minSdkVersion        : 16,
                targetSdkVersion     : 26,
                gson                 : "2.8.0",
                okhttp               : "3.8.1",
                retrofit             : "2.1.0",
                retrofitConverterGson: "2.1.0",
                retrofitAdapterRxjava: "2.1.0",
                rxAndroid            : "1.2.0",
                rxJava               : "1.1.5",
                dagger               : "2.0",
                daggerCompiler       : "2.0",
                jsr250Api            : "1.0",
                joda                 : "2.9.3",
                hawk                 : "1.23",
                cicerone             : "1.2.1",
                logentries           : "logentries-android-4.4.1",
                eventbus             : "3.0.0"
        ]
        def props = rootProject.getExtensions().findByName("ext");
        if (props != null) {
            props = props.properties;
            if (props.containsKey("hiCoreVersion")) {
                props = props.getAt("hiCoreVersion")
                if (props["buildGradle"] != null) hiCoreVersion.buildGradle = props["buildGradle"]
                if (props["androidApt"] != null) hiCoreVersion.androidApt = props["androidApt"]
                if (props["retrolambda"] != null) hiCoreVersion.retrolambda = props["retrolambda"]
                if (props["grgit"] != null) hiCoreVersion.grgit = props["grgit"]
                if (props["compileSdkVersion"] != null) hiCoreVersion.compileSdkVersion = props["compileSdkVersion"]
                if (props["buildToolsVersion"] != null) hiCoreVersion.buildToolsVersion = props["buildToolsVersion"]
                if (props["minSdkVersion"] != null) hiCoreVersion.minSdkVersion = props["minSdkVersion"]
                if (props["targetSdkVersion"] != null) hiCoreVersion.targetSdkVersion = props["targetSdkVersion"]
                if (props["gson"] != null) hiCoreVersion.gson = props["gson"]
                if (props["okhttp"] != null) hiCoreVersion.okhttp = props["okhttp"]
                if (props["retrofit"] != null) hiCoreVersion.retrofit = props["retrofit"]
                if (props["retrofitConverterGson"] != null) hiCoreVersion.retrofitConverterGson = props["retrofitConverterGson"]
                if (props["retrofitAdapterRxjava"] != null) hiCoreVersion.retrofitAdapterRxjava = props["retrofitAdapterRxjava"]
                if (props["rxAndroid"] != null) hiCoreVersion.rxAndroid = props["rxAndroid"]
                if (props["rxJava"] != null) hiCoreVersion.rxJava = props["rxJava"]
                if (props["dagger"] != null) hiCoreVersion.dagger = props["dagger"]
                if (props["daggerCompiler"] != null) hiCoreVersion.daggerCompiler = props["daggerCompiler"]
                if (props["jsr250Api"] != null) hiCoreVersion.jsr250Api = props["jsr250Api"]
                if (props["joda"] != null) hiCoreVersion.joda = props["joda"]
                if (props["hawk"] != null) hiCoreVersion.hawk = props["hawk"]
                if (props["cicerone"] != null) hiCoreVersion.cicerone = props["cicerone"]
                if (props["logentries"] != null) hiCoreVersion.logentries = props["logentries"]
                if (props["eventbus"] != null) hiCoreVersion.eventbus = props["eventbus"]
            }
        }
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${hiCoreVersion.buildGradle}"
        classpath "com.neenbedankt.gradle.plugins:android-apt:${hiCoreVersion.androidApt}"
        classpath "me.tatarka:gradle-retrolambda:${hiCoreVersion.retrolambda}"
        classpath "org.ajoberstar:grgit:${hiCoreVersion.grgit}"
    }
}
import org.ajoberstar.grgit.Grgit

ext {
    git = Grgit.open(currentDir: projectDir)
    gitVersionName = git.describe()
    gitVersionCode = git.tag.list().size()
    gitVersionCodeTime = git.head().time
}

apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'android-apt'

android {
    compileSdkVersion hiCoreVersion.compileSdkVersion
    buildToolsVersion hiCoreVersion.buildToolsVersion
    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def fileName = "hicore-" + variant.name + ".aar"
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace(output.outputFile.name, fileName))
        }
    }

    defaultConfig {
        minSdkVersion hiCoreVersion.minSdkVersion
        targetSdkVersion hiCoreVersion.targetSdkVersion
        versionCode gitVersionCode
        versionName gitVersionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    //Rest client
    compile "com.google.code.gson:gson:${hiCoreVersion.gson}"
    compile "com.squareup.okhttp3:okhttp:${hiCoreVersion.okhttp}"
    compile "com.squareup.retrofit2:retrofit:${hiCoreVersion.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${hiCoreVersion.retrofitConverterGson}"
    compile "com.squareup.retrofit2:adapter-rxjava:${hiCoreVersion.retrofitAdapterRxjava}"
    //Async
    compile "io.reactivex:rxandroid:${hiCoreVersion.rxAndroid}"
    compile "io.reactivex:rxjava:${hiCoreVersion.rxJava}"
    //Dagger
    apt "com.google.dagger:dagger-compiler:${hiCoreVersion.daggerCompiler}"
    compile "com.google.dagger:dagger:${hiCoreVersion.dagger}"
    provided "javax.annotation:jsr250-api:${hiCoreVersion.jsr250Api}"
    //Date times
    compile "net.danlew:android.joda:${hiCoreVersion.joda}"
    //Logs
    compile "com.github.LogentriesCommunity:le_android:${hiCoreVersion.logentries}"
    //Pref storage
    compile "com.github.orhanobut:hawk:${hiCoreVersion.hawk}"
    //Cicerone
    compile "ru.terrakok.cicerone:cicerone:${hiCoreVersion.cicerone}"
    //Messages
    compile "org.greenrobot:eventbus:${hiCoreVersion.eventbus}"

}
